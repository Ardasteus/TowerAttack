Topic: Tower Attack Game

Requirments:
    1: Loading the definitions of attackers (player controlled side) from file
    2: Loading the definitions of defenders (AI controlled side)
    3: Loading map definitions
    4: Interactions between defenders and attackers
    5: Score and Victory detection
    6: AI to place the defenders
    7: Save and load capability

Specification:
    This is a tower attack game, where you battle against an AI that spawns defenders(towers) to stop you. After the AI loses all its lives, you get to pick a power up: Higher HP,
more starting gold, more income. After you finish all the levels you go back to level 0and start over, while keeping all your power ups. The AI gains gold by killing your attackers
while you as the player get gold over time.

    Defenders and Attackers can be customized in the asset folder in their respective files. Same goes for levels. User can also create their own custom maps and include them in the game
or they can chose to only include certain maps by editing the map list file. In the examples folder you can find instructions on how to play the game.

Technicalities:
    Polymorphism in this game/application is used in GameObjects and GUIObjects, which themselves derive from DrawableObject. I could have implemented inheritance and
polymorphism in much more depth, but I opted out to use system comparable to ECS (Entity Component System) rather than multiple different GameObject. Doing proper
GameObject oriented system would require the implementation of GameComponents that can be "slotted" in to a GameObject.

    Having GameObject act as an empty or occupied space and having the defenders and attackers being instances of a single class greatly simplifies the problem. 
If this was a game engine, I would opt out for GameComponentsas it is not however and it is a game, I think the system I chose makes more sense, 
even if it seems like polymorphism was not implemented in such scale as it could have been.